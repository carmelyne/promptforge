*** Begin Patch
*** Add File: .gitignore
+node_modules/
+dist/
+.DS_Store
*** End Patch
*** Begin Patch
*** Add File: vite.config.js
+import { defineConfig } from 'vite';
+import vue from '@vitejs/plugin-vue';
+
+export default defineConfig({
+  plugins: [vue()],
+  resolve: {
+    alias: {
+      '@': '/src'
+    }
+  },
+  build: {
+    assetsInclude: ['**/*.wasm']
+  }
+});
*** End Patch
*** Begin Patch
*** Add File: tailwind.config.js
+module.exports = {
+  darkMode: 'class',
+  content: ['./index.html', './src/**/*.{vue,js,ts,jsx,tsx}'],
+  theme: {
+    extend: {}
+  },
+  plugins: []
+};
*** End Patch
*** Begin Patch
*** Add File: postcss.config.js
+module.exports = {
+  plugins: {
+    tailwindcss: {},
+    autoprefixer: {}
+  }
+};
*** End Patch
*** Begin Patch
*** Add File: index.html
+<!DOCTYPE html>
+<html lang="en">
+  <head>
+    <meta charset="UTF-8" />
+    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+    <title>PromptForge</title>
+    <script type="module" src="/src/main.js"></script>
+  </head>
+  <body class="bg-white text-black dark:bg-gray-900 dark:text-white">
+    <div id="app"></div>
+  </body>
+</html>
*** End Patch
*** Begin Patch
*** Add File: src/index.css
+@tailwind base;
+@tailwind components;
+@tailwind utilities;
*** End Patch
*** Begin Patch
*** Add File: src/main.js
+import { createApp } from 'vue';
+import App from './App.vue';
+import router from './router';
+import { createPinia } from 'pinia';
+import './index.css';
+
+const app = createApp(App);
+app.use(createPinia());
+app.use(router);
+app.mount('#app');
*** End Patch
*** Begin Patch
*** Add File: src/App.vue
+<template>
+  <div class="min-h-screen bg-white text-black dark:bg-gray-900 dark:text-white">
+    <header class="p-4 bg-gray-100 dark:bg-gray-800 flex justify-between items-center">
+      <h1 class="text-2xl font-bold">PromptForge</h1>
+      <button @click="toggleDark" class="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded">
+        {{ isDark ? 'Light Mode' : 'Dark Mode' }}
+      </button>
+    </header>
+    <router-view />
+  </div>
+</template>
+
+<script setup>
+import { ref, onMounted, watch } from 'vue';
+
+const isDark = ref(false);
+
+const toggleDark = () => {
+  isDark.value = !isDark.value;
+  document.documentElement.classList.toggle('dark', isDark.value);
+};
+
+onMounted(() => {
+  const saved = localStorage.getItem('darkMode');
+  if (saved === 'dark') isDark.value = true;
+  else if (saved === 'light') isDark.value = false;
+  else isDark.value = window.matchMedia('(prefers-color-scheme: dark)').matches;
+  document.documentElement.classList.toggle('dark', isDark.value);
+});
+
+watch(isDark, val => {
+  localStorage.setItem('darkMode', val ? 'dark' : 'light');
+});
+</script>
*** End Patch
*** Begin Patch
*** Add File: src/router/index.js
+import { createRouter, createWebHistory } from 'vue-router';
+import PromptList from '../pages/PromptList.vue';
+import PromptEditor from '../pages/PromptEditor.vue';
+
+const routes = [
+  { path: '/', name: 'Home', component: PromptList },
+  { path: '/prompt/new', name: 'NewPrompt', component: PromptEditor },
+  { path: '/prompt/:id', name: 'EditPrompt', component: PromptEditor, props: true }
+];
+
+const router = createRouter({
+  history: createWebHistory(),
+  routes
+});
+
+export default router;
*** End Patch
*** Begin Patch
*** Add File: src/utils/db.js
+import initSqlJs from 'sql.js';
+import wasmURL from 'sql.js/dist/sql-wasm.wasm?url';
+
+let SQL;
+let db;
+
+export async function initDb() {
+  if (!SQL) {
+    SQL = await initSqlJs({ locateFile: () => wasmURL });
+  }
+  const saved = localStorage.getItem('promptforgeDb');
+  if (saved) {
+    const u8 = Uint8Array.from(atob(saved), c => c.charCodeAt(0));
+    db = new SQL.Database(u8);
+  } else {
+    db = new SQL.Database();
+    db.run(`
+      CREATE TABLE IF NOT EXISTS prompts (
+        id INTEGER PRIMARY KEY AUTOINCREMENT,
+        title TEXT NOT NULL,
+        content TEXT NOT NULL,
+        tags TEXT,
+        model TEXT,
+        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
+        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
+      );
+    `);
+  }
+  return db;
+}
+
+export function saveDb() {
+  const data = db.export();
+  const b64 = btoa(String.fromCharCode(...data));
+  localStorage.setItem('promptforgeDb', b64);
+}
*** End Patch
*** Begin Patch
*** Add File: src/store/prompts.js
+import { defineStore } from 'pinia';
+import { initDb, saveDb } from '../utils/db';
+
+export const usePromptStore = defineStore('prompts', {
+  state: () => ({
+    db: null,
+    prompts: []
+  }),
+  actions: {
+    async init() {
+      this.db = await initDb();
+      this.loadPrompts();
+    },
+    loadPrompts() {
+      const stmt = this.db.prepare('SELECT * FROM prompts ORDER BY created_at DESC');
+      this.prompts = [];
+      while (stmt.step()) {
+        this.prompts.push(stmt.getAsObject());
+      }
+      stmt.free();
+    },
+    addPrompt(prompt) {
+      const stmt = this.db.prepare(
+        'INSERT INTO prompts (title, content, tags, model) VALUES (:title, :content, :tags, :model)'
+      );
+      stmt.bind({ ':title': prompt.title, ':content': prompt.content, ':tags': prompt.tags, ':model': prompt.model });
+      stmt.step();
+      stmt.free();
+      saveDb();
+      this.loadPrompts();
+    },
+    updatePrompt(id, prompt) {
+      const stmt = this.db.prepare(
+        'UPDATE prompts SET title = :title, content = :content, tags = :tags, model = :model, updated_at = CURRENT_TIMESTAMP WHERE id = :id'
+      );
+      stmt.bind({ ':id': id, ':title': prompt.title, ':content': prompt.content, ':tags': prompt.tags, ':model': prompt.model });
+      stmt.step();
+      stmt.free();
+      saveDb();
+      this.loadPrompts();
+    },
+    deletePrompt(id) {
+      const stmt = this.db.prepare('DELETE FROM prompts WHERE id = :id');
+      stmt.bind({ ':id': id });
+      stmt.step();
+      stmt.free();
+      saveDb();
+      this.loadPrompts();
+    }
+  }
+});
*** End Patch
*** Begin Patch
*** Add File: src/components/PromptCard.vue
+<template>
+  <div class="border rounded p-4 bg-white dark:bg-gray-800 dark:text-white">
+    <h2 class="font-semibold text-lg">{{ prompt.title }}</h2>
+    <p class="text-sm mt-2 line-clamp-3">{{ prompt.content }}</p>
+    <div class="text-xs text-gray-500 dark:text-gray-400 mt-2">{{ prompt.tags }}</div>
+    <div class="mt-3">
+      <router-link :to="`/prompt/${prompt.id}`" class="text-blue-500 hover:underline">Edit</router-link>
+    </div>
+  </div>
+</template>
+
+<script setup>
+defineProps({
+  prompt: { type: Object, required: true }
+});
+</script>
*** End Patch
*** Begin Patch
*** Add File: src/pages/PromptList.vue
+<template>
+  <div class="container mx-auto p-4">
+    <div class="flex justify-between items-center mb-4">
+      <h1 class="text-2xl font-bold">Prompts</h1>
+      <router-link to="/prompt/new" class="px-4 py-2 bg-blue-500 text-white rounded">New Prompt</router-link>
+    </div>
+    <div v-if="prompts.length" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
+      <PromptCard v-for="p in prompts" :key="p.id" :prompt="p" />
+    </div>
+    <div v-else class="text-gray-500">No prompts yet. Click “New Prompt” to get started.</div>
+  </div>
+</template>
+
+<script setup>
+import { onMounted } from 'vue';
+import { usePromptStore } from '../store/prompts';
+import PromptCard from '../components/PromptCard.vue';
+
+const store = usePromptStore();
+
+onMounted(async () => {
+  await store.init();
+});
+
+const prompts = store.prompts;
+</script>
*** End Patch
*** Begin Patch
*** Add File: src/pages/PromptEditor.vue
+<template>
+  <div class="container mx-auto p-4">
+    <h1 class="text-2xl font-bold mb-4">{{ isEdit ? 'Edit Prompt' : 'New Prompt' }}</h1>
+    <form @submit.prevent="onSubmit" class="space-y-4">
+      <div>
+        <label class="block mb-1">Title</label>
+        <input v-model="title" class="w-full border rounded p-2" required />
+      </div>
+      <div>
+        <label class="block mb-1">Content</label>
+        <textarea v-model="content" class="w-full border rounded p-2" rows="6" required></textarea>
+      </div>
+      <div>
+        <label class="block mb-1">Tags (comma-separated)</label>
+        <input v-model="tags" class="w-full border rounded p-2" />
+      </div>
+      <div>
+        <label class="block mb-1">Model</label>
+        <input v-model="model" class="w-full border rounded p-2" placeholder="e.g., gpt-4" />
+      </div>
+      <div class="flex space-x-2">
+        <button type="submit" class="px-4 py-2 bg-blue-500 text-white rounded">{{ isEdit ? 'Update' : 'Create' }}</button>
+        <router-link to="/" class="px-4 py-2 bg-gray-300 dark:bg-gray-700 text-black dark:text-white rounded">Cancel</router-link>
+      </div>
+    </form>
+  </div>
+</template>
+
+<script setup>
+import { ref, onMounted } from 'vue';
+import { useRoute, useRouter } from 'vue-router';
+import { usePromptStore } from '../store/prompts';
+
+const route = useRoute();
+const router = useRouter();
+const store = usePromptStore();
+const isEdit = Boolean(route.params.id);
+const id = route.params.id;
+
+const title = ref('');
+const content = ref('');
+const tags = ref('');
+const model = ref('');
+
+onMounted(async () => {
+  await store.init();
+  if (isEdit) {
+    const p = store.prompts.find(item => item.id === Number(id));
+    if (p) {
+      title.value = p.title;
+      content.value = p.content;
+      tags.value = p.tags;
+      model.value = p.model;
+    }
+  }
+});
+
+const onSubmit = () => {
+  if (isEdit) {
+    store.updatePrompt(Number(id), { title: title.value, content: content.value, tags: tags.value, model: model.value });
+  } else {
+    store.addPrompt({ title: title.value, content: content.value, tags: tags.value, model: model.value });
+  }
+  router.push('/');
+};
+</script>
*** End Patch
